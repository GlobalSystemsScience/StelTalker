/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ConstellationChooser.java
 *
 * Created on May 26, 2010, 2:58:59 PM
 */
package edu.berkeley.lhs.digitarium;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import javax.swing.AbstractListModel;
import javax.swing.JRadioButton;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

public final class ConstellationChooser extends javax.swing.JPanel implements
		ListSelectionListener, ActionListener {

	private static final long serialVersionUID = 6282816863413293342L;
	private CommandListener commandListener;
	private String currentSelectionAbbrev;
	private HashMap<String, ConstellationParser> cp = new HashMap<String, ConstellationParser>();
	private String culture;
	private final static String[] cultures = { "aztec", "chinese", "egyptian",
			"hindu", "inuit", "lakota", "navajo", "norse", "polynesian",
			"sami", "western" };
	private final JRadioButton[] cultureButtonList;
	private final ConstellationListModel[] model;
	private final HorizonCalculator hc;

	/** Creates new form ConstellationChooser */
	public ConstellationChooser() {
		hc = new HorizonCalculator(37.871666667, -122.271666667);
		culture = "western";
		for (String s : cultures) {
			cp.put(s, new ConstellationParser(s));
		}
		model = new ConstellationListModel[cultures.length];
		for (int i = 0; i < cultures.length; i++) {
			final int c = i;
			model[i] = new ConstellationListModel(cultures[c]);
		}
		initComponents();
		cultureButtonList = new JRadioButton[] { jRadioButton1, jRadioButton2,
				jRadioButton3, jRadioButton4, jRadioButton5, jRadioButton6,
				jRadioButton7, jRadioButton8, jRadioButton9, jRadioButton10,
				jRadioButton11 };
		constellationList.addListSelectionListener(this);
		stickSelection.addActionListener(this);
		artSelection.addActionListener(this);
		for (int i = 0; i < cultures.length; i++) {
			final int c = i;
			final JRadioButton b = cultureButtonList[i];
			b.addActionListener(new ActionListener() {

				public void actionPerformed(ActionEvent e) {
					culture = b.getText().toLowerCase();
					if (culture.equals("aztec") || culture.equals("inuit")
							|| culture.equals("hindu")
							|| culture.equals("western")) {
						artSelection.setEnabled(true);
					} else {
						artSelection.setEnabled(false);
					}
					fireCommand("deselect");
					currentSelectionAbbrev = null;
					fireCommand("set sky_culture " + culture);
					constellationList.setModel(model[c]);
				}
			});
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup2 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        constellationList = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jRadioButton6 = new javax.swing.JRadioButton();
        jRadioButton7 = new javax.swing.JRadioButton();
        jRadioButton8 = new javax.swing.JRadioButton();
        stickSelection = new javax.swing.JCheckBox();
        artSelection = new javax.swing.JCheckBox();
        jRadioButton9 = new javax.swing.JRadioButton();
        jRadioButton10 = new javax.swing.JRadioButton();
        jRadioButton11 = new javax.swing.JRadioButton();

        constellationList.setModel(model[10]);
        jScrollPane1.setViewportView(constellationList);

        buttonGroup2.add(jRadioButton1);
        jRadioButton1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jRadioButton1.setText("Aztec");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        buttonGroup2.add(jRadioButton2);
        jRadioButton2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jRadioButton2.setText("Chinese");

        buttonGroup2.add(jRadioButton3);
        jRadioButton3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jRadioButton3.setText("Egyptian");

        buttonGroup2.add(jRadioButton4);
        jRadioButton4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jRadioButton4.setText("Hindu");

        buttonGroup2.add(jRadioButton5);
        jRadioButton5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jRadioButton5.setText("Inuit");

        buttonGroup2.add(jRadioButton6);
        jRadioButton6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jRadioButton6.setText("Lakota");

        buttonGroup2.add(jRadioButton7);
        jRadioButton7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jRadioButton7.setText("Navajo");

        buttonGroup2.add(jRadioButton8);
        jRadioButton8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jRadioButton8.setText("Norse");

        stickSelection.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        stickSelection.setSelected(true);
        stickSelection.setLabel("Stick Drawings");

        artSelection.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        artSelection.setLabel("Artwork");
        artSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                artSelectionActionPerformed(evt);
            }
        });

        buttonGroup2.add(jRadioButton9);
        jRadioButton9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jRadioButton9.setText("Polynesian");

        buttonGroup2.add(jRadioButton10);
        jRadioButton10.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jRadioButton10.setText("Sami");

        buttonGroup2.add(jRadioButton11);
        jRadioButton11.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jRadioButton11.setSelected(true);
        jRadioButton11.setText("Western");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jRadioButton4)
                    .add(jRadioButton7)
                    .add(jRadioButton6)
                    .add(jRadioButton5)
                    .add(jRadioButton9)
                    .add(jRadioButton10)
                    .add(jRadioButton11)
                    .add(jRadioButton3)
                    .add(jRadioButton8)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jRadioButton1)
                            .add(jRadioButton2))
                        .add(47, 47, 47)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(artSelection)
                            .add(stickSelection, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE))))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jRadioButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(stickSelection))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jRadioButton2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(artSelection))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jRadioButton3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jRadioButton4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jRadioButton5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jRadioButton6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jRadioButton7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jRadioButton8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jRadioButton9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jRadioButton10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jRadioButton11, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(95, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 224, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

        private void artSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_artSelectionActionPerformed
            // TODO add your handling code here:
        }//GEN-LAST:event_artSelectionActionPerformed

        private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
            // TODO add your handling code here:
        }//GEN-LAST:event_jRadioButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox artSelection;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JList constellationList;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton10;
    private javax.swing.JRadioButton jRadioButton11;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JRadioButton jRadioButton7;
    private javax.swing.JRadioButton jRadioButton8;
    private javax.swing.JRadioButton jRadioButton9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox stickSelection;
    // End of variables declaration//GEN-END:variables

	private Constellation[] getConstellations(String culture) {
		Collection<Constellation> valueSet = cp.get(culture).nameMap.values();
		Constellation[] stars = valueSet.toArray(new Constellation[valueSet
				.size()]);
		Arrays.<Constellation> sort(stars, new Comparator<Constellation>() {

			@Override
			public int compare(Constellation o1, Constellation o2) {
				return String.CASE_INSENSITIVE_ORDER.compare(o1.name, o2.name);
			}
		});
		return stars;
	}

	public void setCommandListener(CommandListener listener) {
		commandListener = listener;
	}

	private void fireCommand(String command) {
		commandListener.commandOccured(command);
	}

	public void valueChanged(ListSelectionEvent e) {
		Constellation selectedVal = (Constellation) constellationList
				.getSelectedValue();
		if (selectedVal == null) {
			return;
		}
		String newAbbrev = selectedVal.abbrev;
		if (newAbbrev.equals(currentSelectionAbbrev)) {
			return;
		} else if (currentSelectionAbbrev != null) {
			fireCommand("deselect constellation " + currentSelectionAbbrev);
		}
		currentSelectionAbbrev = newAbbrev;
		fireCommand("select constellation " + currentSelectionAbbrev);
	}

	public void enterMode() {
		stickAction();
		artAction();
		fireCommand("flag landscape off");
		fireCommand("flag atmosphere off");
	}

	public void exitMode() {
		fireCommand("deselect");
		fireCommand("flag constellation_drawing off");
		fireCommand("flag constellation_art off");
		fireCommand("flag landscape on");
		fireCommand("flag atmosphere on");
	}

	private String artSelected() {
		return artSelection.isSelected() ? "on" : "off";
	}

	private String stickSelected() {
		return stickSelection.isSelected() ? "on" : "off";
	}

	public void actionPerformed(ActionEvent e) {
		Object o = e.getSource();
		if (o == stickSelection) {
			stickAction();
		} else if (o == artSelection) {
			artAction();
		}
	}

	private void stickAction() {
		fireCommand("flag constellation_drawing " + stickSelected());
	}

	private void artAction() {
		fireCommand("flag constellation_art " + artSelected());
	}

	private class ConstellationListModel extends AbstractListModel {
		private static final long serialVersionUID = -4092952047784715584L;
		public final Constellation[] constellations;
		public final ArrayList<Constellation> visibleConstellations;

		public ConstellationListModel(String culture) {
			constellations = getConstellations(culture);
			visibleConstellations = new ArrayList<Constellation>();
			long time = System.currentTimeMillis();
			// TODO Program time, not real time
			for (Constellation c : constellations) {
				if (!c.hasLocation || hc.isVisible(time, c.ra, c.dec)) {
					visibleConstellations.add(c);
				}
			}
		}

		@Override
		public int getSize() {
			return visibleConstellations.size();
		}

		@Override
		public Object getElementAt(int index) {
			return visibleConstellations.get(index);
		}
	}
}
