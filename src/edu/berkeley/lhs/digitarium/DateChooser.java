/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DateChooser.java
 *
 * Created on May 24, 2010, 2:23:39 PM
 */
package edu.berkeley.lhs.digitarium;

import java.util.Calendar;
import java.text.SimpleDateFormat;
import javax.swing.SpinnerDateModel;
import javax.swing.JSpinner;
import javax.swing.event.*;
import java.awt.event.*;
import java.util.Date;

public class DateChooser extends javax.swing.JPanel implements ChangeListener,
		ActionListener, Runnable {

	private static final long serialVersionUID = -4346873807123116754L;
	private Calendar c = Calendar.getInstance();
	private static final int SPEED_ONE = 6;
	private int speedOption = SPEED_ONE;
	private long startedAt = System.currentTimeMillis();
	private long startedFrom = startedAt;
	private long current = startedAt;
	private SpinnerDateModel sdm = new SpinnerDateModel();
	private static final SimpleDateFormat stelFormat = new SimpleDateFormat(
			"yyyy-MM-d'T'HH:mm:ss");
	private boolean normalChange = false;
	private static final double[] speeds = { -5000, -1000, -100, -10, -1, 0, 1,
			10, 100, 1000, 5000 };
	private CommandListener myListener;

	/** Creates new form DateChooser */
	public DateChooser() {
		initComponents();
		time.addChangeListener(this);
		rewind.addActionListener(this);
		now.addActionListener(this);
		fastForward.addActionListener(this);
		final JSpinner.DateEditor editor = (JSpinner.DateEditor) time
				.getEditor();
		editor.getFormat().applyPattern("M/d/yy h:mm:ss a");
		Thread t = new Thread(this);
		t.setDaemon(true);
		t.start();
	}

	public synchronized void stateChanged(ChangeEvent e) {
		if (normalChange) {
			normalChange = false;
		} else {
			startedAt = current;
			Date d = (Date) time.getValue();
			startedFrom = d.getTime();
			fireCommand("date local " + stelFormat.format(d));
		}
	}

	public synchronized void actionPerformed(ActionEvent e) {
		Object o = e.getSource();
		if (o == rewind) {
			if (speedOption > 0) {
				speedOption--;
				startedAt = System.currentTimeMillis();
				startedFrom = ((Date) time.getValue()).getTime();
				fireCommand("timerate rate " + speeds[speedOption]);
			}
		} else if (o == now) {
			resetTime();
		} else if (o == fastForward) {
			if (speedOption < speeds.length - 1) {
				speedOption++;
				startedAt = System.currentTimeMillis();
				startedFrom = ((Date) time.getValue()).getTime();
				fireCommand("timerate rate " + speeds[speedOption]);
			}
		}
	}

	public synchronized void run() {
		JSpinner.DateEditor editor = (JSpinner.DateEditor) time.getEditor();
		while (true) {
			try {
				current = System.currentTimeMillis();
				double speed = speeds[speedOption];
				c.setTimeInMillis((long) ((current - startedAt) * speed)
						+ startedFrom);
				normalChange = true;
				int selectionStart = editor.getTextField().getSelectionStart();
				time.setValue(c.getTime());
				editor.getTextField().setSelectionStart(selectionStart);
				wait((long) (1000 / Math.min(speed == 0 ? 1 : Math.abs(speed),
						4)));
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}

	public void setCommandListener(CommandListener cl) {
		myListener = cl;
	}

	public void fireCommand(String s) {
		myListener.commandOccured(s);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		rewind = new javax.swing.JButton();
		time = new javax.swing.JSpinner(sdm);
		fastForward = new javax.swing.JButton();
		now = new javax.swing.JButton();

		rewind.setText("<<");

		fastForward.setText(">>");

		now.setText("+");

		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(
				this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				org.jdesktop.layout.GroupLayout.LEADING).add(
				layout.createSequentialGroup().addContainerGap().add(rewind)
						.addPreferredGap(
								org.jdesktop.layout.LayoutStyle.UNRELATED).add(
								time).add(7, 7, 7).add(now).addPreferredGap(
								org.jdesktop.layout.LayoutStyle.RELATED).add(
								fastForward).add(19, 19, 19)));
		layout
				.setVerticalGroup(layout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(
								org.jdesktop.layout.GroupLayout.TRAILING,
								layout
										.createSequentialGroup()
										.addContainerGap(20, Short.MAX_VALUE)
										.add(
												layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.LEADING)
														.add(
																time,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
														.add(
																layout
																		.createParallelGroup(
																				org.jdesktop.layout.GroupLayout.TRAILING)
																		.add(
																				rewind)
																		.add(
																				layout
																						.createParallelGroup(
																								org.jdesktop.layout.GroupLayout.BASELINE)
																						.add(
																								fastForward)
																						.add(
																								now))))
										.addContainerGap()));
	}// </editor-fold>//GEN-END:initComponents

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton fastForward;
	private javax.swing.JButton now;
	private javax.swing.JButton rewind;
	private javax.swing.JSpinner time;

	// End of variables declaration//GEN-END:variables

	void resetTime() {
		c.setTimeInMillis(System.currentTimeMillis());
		startedAt = c.getTimeInMillis();
		startedFrom = startedAt;
		normalChange = true;
		time.setValue(c.getTime());
		speedOption = SPEED_ONE;
		fireCommand("timerate rate 1");
		fireCommand("date load current");
	}
}
